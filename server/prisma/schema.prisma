// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  products ProductCategory[]

  @@map("categories")
}

model Product {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  brand          String?
  originalPrice  Float?
  margin         Float?
  price          Float
  size           String?
  stock          Int      @default(0)
  active         Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  categories    ProductCategory[]
  images        Image[]
  orderItems    OrderItem[]

  @@map("products")
}

model ProductCategory {
  productId  Int @map("product_id")
  categoryId Int @map("category_id")

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Gallery {
  id          Int      @id @default(autoincrement())
  name        String
  imagePath   String   @map("image_path")
  previewPath String?  @map("preview_path")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  images Image[]

  @@map("gallery")
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  galleryId Int      @map("gallery_id")
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  gallery Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Customer {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  customerName    String?  @map("customer_name")
  customerLastname String? @map("customer_lastname")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  firstConnection DateTime? @map("first_connection")
  lastConnection  DateTime? @map("last_connection")

  // Relations
  orders Order[]

  @@map("customers")
}

model Order {
  id              Int      @id @default(autoincrement())
  customerName    String   @map("customer_name")
  customerEmail   String   @map("customer_email")
  customerLastname String  @map("customer_lastname")
  total           Float
  status          String   @default("pending")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  customerId Int?     @map("customer_id")
  customer   Customer? @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("admin_users")
}

model Setting {
  key   String @id
  value String

  @@map("settings")
}
